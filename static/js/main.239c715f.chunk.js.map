{"version":3,"sources":["components/AuthorImage.js","components/ArticleDateAndReadingTime.js","components/Bookmark.js","components/Author.js","components/MemberPreviewIdentifier.js","components/ArticleIdentifiers.js","components/Article.js","components/ArticleList.js","App.js","serviceWorker.js","index.js"],"names":["AuthorImage","props","className","src","image","alt","isMediumMember","ArticleDateAndReadingTime","postedDate","minutesToRead","articleDate","Date","articleMonthAbbreviation","getMonth","monthAndDate","getDate","Bookmark","isBookmarked","handleBookmarkClick","icon","fasBookmark","faBookmark","onClick","Author","authorData","name","MemberPreviewIdentifier","displayText","memberPreview","memberPreviewText","faStar","ArticleIdentifiers","hasAudioAvailable","faVolumeUp","Article","state","bind","this","setState","articleData","author","link","title","description","href","React","Component","ArticleList","heading","articleListData","map","i","key","App","yourArticles","missedArticles","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.239c715f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst AuthorImage = (props) => {\n\n  return (\n    <div className={'author-image-container'}>\n      <img\n        src={props.image}\n        alt={'name'}\n        className={props.isMediumMember ? 'medium-member' : null} />\n    </div>\n  );\n}\n\nAuthorImage.propTypes = {\n  image: PropTypes.string.isRequired,\n  isMediumMember: PropTypes.bool.isRequired,\n}\n\nexport default AuthorImage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ArticleDateAndReadingTime = (props) => {\n  const { postedDate, minutesToRead } = props\n  const monthAbbreviations = ['Jan',\n                              'Feb',\n                              'Mar',\n                              'Apr',\n                              'May',\n                              'Jun',\n                              'Jul',\n                              'Aug',\n                              'Sep',\n                              'Oct',\n                              'Nov',\n                              'Dec']\n  const articleDate = new Date(postedDate);\n  const articleMonthAbbreviation = monthAbbreviations[articleDate.getMonth()];\n  const monthAndDate = `${articleMonthAbbreviation} ${articleDate.getDate()}`;\n\n  return (\n    <p className={'article-date-reading'}>{monthAndDate} &middot; {`${minutesToRead} min read`}</p>\n  );\n}\n\nArticleDateAndReadingTime.propTypes = {\n  postedDate: PropTypes.string.isRequired,\n  minutesToRead: PropTypes.number.isRequired,\n}\n\nexport default ArticleDateAndReadingTime;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBookmark } from '@fortawesome/free-regular-svg-icons';\nimport { faBookmark as fasBookmark } from '@fortawesome/free-solid-svg-icons';\n\nconst Bookmark = (props) => {\n  const { isBookmarked, handleBookmarkClick } = props\n\n  return (\n    <div\n      className={'bookmark'}>\n      <FontAwesomeIcon\n        icon={isBookmarked ? fasBookmark : faBookmark}\n        className={isBookmarked ? 'bookmarked' : ''}\n        onClick={handleBookmarkClick}\n      />\n    </div>\n  );\n}\n\nBookmark.propTypes = {\n  isBookmarked: PropTypes.bool.isRequired,\n  handleBookmarkClick: PropTypes.func.isRequired,\n}\n\nexport default Bookmark;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AuthorImage from './AuthorImage';\nimport ArticleDateAndReadingTime from './ArticleDateAndReadingTime';\nimport Bookmark from './Bookmark';\n\nconst Author = (props) => {\n  const { authorData, postedDate, minutesToRead, isBookmarked, handleBookmarkClick } = props\n  const { name, image, isMediumMember } = authorData\n\n  return (\n    <div className={'author-container'}>\n      <AuthorImage\n        image={image}\n        isMediumMember={isMediumMember}\n      >\n      </AuthorImage>\n      <div className={'author-name'}>\n        <p><b>{name}</b></p>\n        <ArticleDateAndReadingTime\n          postedDate={postedDate}\n          minutesToRead={minutesToRead}\n        >\n        </ArticleDateAndReadingTime>\n      </div>\n      <Bookmark\n        isBookmarked={isBookmarked}\n        handleBookmarkClick={handleBookmarkClick}\n      >\n      </Bookmark>\n    </div>\n  );\n}\n\nAuthor.propTypes = {\n  authorData: PropTypes.object.isRequired,\n  postedDate: PropTypes.string.isRequired,\n  minutesToRead: PropTypes.number.isRequired,\n  isBookmarked: PropTypes.bool.isRequired,\n  handleBookmarkClick: PropTypes.func.isRequired,\n}\n\nexport default Author;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faStar } from '@fortawesome/free-solid-svg-icons';\n\nconst MemberPreviewIdentifier = (props) => {\n  const { displayText, memberPreview } = props\n  const memberPreviewText =\n    displayText ? <span className={'article-identifier-text'}>Member preview</span> : null;\n\n  return (\n    memberPreview\n      ? <span>\n          <FontAwesomeIcon icon={faStar} />\n          {memberPreviewText}\n        </span>\n      : null\n  );\n}\n\nMemberPreviewIdentifier.propTypes = {\n  displayText: PropTypes.bool.isRequired,\n  memberPreview: PropTypes.bool.isRequired,\n}\n\nexport default MemberPreviewIdentifier;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faVolumeUp } from '@fortawesome/free-solid-svg-icons';\nimport MemberPreviewIdentifier from './MemberPreviewIdentifier';\n\nconst ArticleIdentifiers = (props) => {\n  const { hasAudioAvailable, memberPreview } = props\n\n  return (\n    <div className={'article-identifiers'}>\n      { hasAudioAvailable\n        ? <span>\n            <FontAwesomeIcon icon={faVolumeUp} />\n            <span className={'article-identifier-text'}>\n              Audio available\n            </span>\n          </span>\n        : null\n      }\n      <MemberPreviewIdentifier\n        memberPreview={memberPreview}\n        displayText={!hasAudioAvailable}\n      ></MemberPreviewIdentifier>\n    </div>\n  );\n}\n\nArticleIdentifiers.propTypes = {\n  hasAudioAvailable: PropTypes.bool.isRequired,\n  memberPreview: PropTypes.bool.isRequired,\n}\n\nexport default ArticleIdentifiers;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Author from './Author';\nimport ArticleIdentifiers from './ArticleIdentifiers';\n\nclass Article extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isBookmarked: false,\n    }\n    this.handleBookmarkClick = this.handleBookmarkClick.bind(this);\n  }\n\n  handleBookmarkClick() {\n    this.setState({\n      isBookmarked: !this.state.isBookmarked,\n    })\n  }\n\n  render() {\n    const { articleData } = this.props\n    const { author,\n            image,\n            link,\n            title,\n            description,\n            postedDate,\n            minutesToRead,\n            hasAudioAvailable,\n            memberPreview } = articleData\n\n    return (\n      <div className={'article-container'}>\n        <div className={'article-content'}>\n          <a href={link}>\n            <img src={image} alt={''} />\n          </a>\n          <article>\n            <ArticleIdentifiers\n              hasAudioAvailable={hasAudioAvailable}\n              memberPreview={memberPreview}\n            >\n            </ArticleIdentifiers>\n            <a href={link}>\n              <h2>{title}</h2>\n              <p>{description}</p>\n            </a>\n            <Author\n              authorData={author}\n              postedDate={postedDate}\n              minutesToRead={minutesToRead}\n              isBookmarked={this.state.isBookmarked}\n              handleBookmarkClick={this.handleBookmarkClick}\n            >\n            </Author>\n          </article>\n        </div>\n      </div>\n    );\n  }\n}\n\nArticle.propTypes = {\n  articleData: PropTypes.object.isRequired,\n}\n\nexport default Article;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Article from './Article';\n\nconst ArticleList = (props) => {\n  return (\n    <div className={props.className}>\n      <div className={'heading-container'}>\n        <h1>{props.heading}</h1>\n      </div>\n      <div className={'article-list-container'}>\n        {props.articleListData.map((articleData, i) =>\n          <Article\n            articleData={articleData}\n            key={i}\n          >\n          </Article>\n        )}\n      </div>\n    </div>\n  );\n}\n\nArticleList.propTypes = {\n  className: PropTypes.string.isRequired,\n  heading: PropTypes.string.isRequired,\n  articleListData: PropTypes.arrayOf(PropTypes.object),\n}\n\nexport default ArticleList;\n","import React from 'react';\nimport './App.scss';\nimport './styles/articles.scss'\nimport yourArticles from './_data/your-articles.json';\nimport missedArticles from './_data/missed-articles.json';\nimport ArticleList from './components/ArticleList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ArticleList\n        className={'your-article-list'}\n        heading={'For you'}\n        articleListData={yourArticles}>\n      </ArticleList>\n      <ArticleList\n        className={'missed-article-list'}\n        heading={'In case you missed it'}\n        articleListData={missedArticles}>\n      </ArticleList>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}